/* <javascriptresource> <name>KPImaps MapMaker</name> <about>Process map image to identif objects</about> </javascriptresource> */var buildingNumber = parseInt(prompt("Введіть номер корпусу", ""));var floorNumber = parseInt(prompt("Введіть номер поверху", ""));var buildingID = '2' + (buildingNumber < 10 ? '0' : '') + buildingNumber;var indexPrefix = buildingID + floorNumber;var processedLayersCount = 0;if (!indexPrefix){    alert("Неправильно вказані данні!");}else{    var rooms = [];    var texts = [];    var icons = [];    function getAllLayers(node) {        for (var layerIterator = 0; layerIterator < node.layers.length; layerIterator++) {            var layer = node.layers[layerIterator];            //alert(layer.kind + "\n" + layer.bounds);            if (layer.typename == 'LayerSet') {                // its a group, send it back to be looped through                getAllLayers(layer);            } else {                // its a single layer                if (layer.kind == 'LayerKind.SOLIDFILL') {                    rooms.push(layer);                } else if (layer.kind == 'LayerKind.TEXT') {                    texts.push(layer);                } else if (layer.kind == 'LayerKind.NORMAL' || layer.kind == 'LayerKind.SMARTOBJECT') {                    var x1 = numberFromPixelsString(layer.bounds[0]);                    var y1 = numberFromPixelsString(layer.bounds[1]);                    var x2 = numberFromPixelsString(layer.bounds[2]);                    var y2 = numberFromPixelsString(layer.bounds[3]);                    var width = x2 - x1;                    var height = y2 - y1;                    if (width == height) {                        icons.push(layer);                    }                }            }        }    }    getAllLayers(app.activeDocument);    //clearDuplicateIcons();    function clearDuplicateIcons() {        for (var clearDuplicateIconsIteraotr = 0; clearDuplicateIconsIteraotr < icons.length; clearDuplicateIconsIteraotr++) {            var layer = icons[clearDuplicateIconsIteraotr];            var x1 = numberFromPixelsString(layer.bounds[0]);            var y1 = numberFromPixelsString(layer.bounds[1]);            var x2 = numberFromPixelsString(layer.bounds[2]);            var y2 = numberFromPixelsString(layer.bounds[3]);            var room = roomInCoordinates (x1, y1, x2, y2);            if (room) {                icons.splice(i, 1);            }        }    }    var jsonFile;    if (rooms.length + icons.length > 0) {        var filePath = "" + app.activeDocument.path;        var fileName = ("" + app.activeDocument.fullName).split('/').pop().split('.')[0];        var jsonPath = filePath + '/' + fileName + '.json';        var jsonFile = new File(jsonPath);        jsonFile.open('w', 'json');        jsonFile.encoding = 'UTF-8';                jsonFile.writeln('{');        jsonFile.writeln('\t"success": 1,');        jsonFile.writeln('\t"buildingID": ' + buildingID + ',');        jsonFile.writeln('\t"buildingName": "' + fileName + '",');        jsonFile.writeln('\t"floorMaps": [');        jsonFile.writeln('\t\t{');        jsonFile.writeln('\t\t\t"floorMapID": ' + indexPrefix + ',');        jsonFile.writeln('\t\t\t"floorNumber": ' + floorNumber + ',');        jsonFile.writeln('\t\t\t"floorImage": "' + fileName + '",');        jsonFile.writeln('\t\t\t"interactiveObjects": [');        processLayers();        jsonFile.writeln('\t\t\t]');        jsonFile.writeln('\t\t}');        jsonFile.writeln('\t]');        jsonFile.writeln('}');        jsonFile.close();                alert('Файл створено' + '\n' + jsonPath);    } else {        alert("Не знайдено позначених об’єктів на мапі");    }    function numberFromPixelsString(pixelString) {        return parseInt (("" + pixelString).split(' ')[0], 10);    }    function textInCoordinates(roomX1, roomY1, roomX2, roomY2) {        var result;        for (var textInCoordinatesIterrator = 0; textInCoordinatesIterrator < texts.length; textInCoordinatesIterrator++) {            var text = texts[textInCoordinatesIterrator];            var x1 = numberFromPixelsString(text.bounds[0]);            var y1 = numberFromPixelsString(text.bounds[1]);            var x2 = numberFromPixelsString(text.bounds[2]);            var y2 = numberFromPixelsString(text.bounds[3]);            if (x1 >= roomX1 && x2 <= roomX2 && y1 >= roomY1 && y2 <= roomY2) {                result = text.textItem.contents;                break;            }        }        return result;    }    function roomInCoordinates(x1, y1, x2, y2) {        var result;        for (var roomInCoordinateIterrator = 0; roomInCoordinateIterrator < rooms.length; roomInCoordinateIterrator++) {            var room = rooms[roomInCoordinateIterrator];            var roomX1 = numberFromPixelsString(room.bounds[0]);            var roomY1 = numberFromPixelsString(room.bounds[1]);            var roomX2 = numberFromPixelsString(room.bounds[2]);            var roomY2 = numberFromPixelsString(room.bounds[3]);            if (x1 >= roomX1 && x2 <= roomX2 && y1 >= roomY1 && y2 <= roomY2) {                result = room;                break;            }        }        return result;    }    function processLayer(layer, shouldEnd) {        x1 = numberFromPixelsString(layer.bounds[0]);        y1 = numberFromPixelsString(layer.bounds[1]);        x2 = numberFromPixelsString(layer.bounds[2]);        y2 = numberFromPixelsString(layer.bounds[3]);        width = x2 - x1;        height = y2 - y1;        text = textInCoordinates(x1, y1, x2, y2);        type = parseInt (layer.name, 10);        if (!type) {            type = objectTypeFromName(layer.name.toLowerCase());            if (!type && text) {                type = objectTypeFromName(text.toLowerCase());                if (!type) {                    type = objectTypeFromName("special");                }            }        }        if (!text) {            if (type) {                text = humanReadableType(type);            } else {                text = layer.name;            }        }                jsonFile.writeln('\t\t\t\t{');        jsonFile.writeln('\t\t\t\t\t"interactiveObjectID": ' + indexPrefix + processedLayersCount + ',');        jsonFile.writeln('\t\t\t\t\t"interactiveObjectType": ' + type + ',');        jsonFile.writeln('\t\t\t\t\t"interactiveObjectName": "' + text + '",');        jsonFile.writeln('\t\t\t\t\t"description": "",');        jsonFile.writeln('\t\t\t\t\t"x": ' + x1 + ',');        jsonFile.writeln('\t\t\t\t\t"y": ' + y1 + ',');        jsonFile.writeln('\t\t\t\t\t"width": ' + width + ',');        jsonFile.writeln('\t\t\t\t\t"height": ' + height + ',');        jsonFile.writeln('\t\t\t\t\t"amenities": [ ]');        if (shouldEnd) {            jsonFile.writeln('\t\t\t\t}');        } else {            jsonFile.writeln('\t\t\t\t},');        }        processedLayersCount++;    }    function humanReadableType(objectType) {        var name = "Undefined";        switch (objectType)    	{    		case 5:  name = "Банкомат"; break;    		case 4:  name = "Кафетерій"; break;    		case 7:  name = "Кава"; break;    		case 22: name = "Майстерня"; break;    		case 6:  name = "Платіжний автомат"; break;    		case 3:  name = "Принт-центр"; break;    		case 23: name = "Туалет"; break;    		case 8:  name = "Медичний заклад"; break;    		case 9:  name = "Магазин"; break;    		case 20: name = "Навчальна аудиторія"; break;    		case 21: name = "Кабінет викладача"; break;    		case 12: name = "Цирульня"; break;    		case 11: name = "Пральня"; break;    		case 10: name = "Міліція"; break;    		case 27: name = "Концертна/актова зала"; break;    		case 25: name = "Вихід"; break;    		case 24: name = "Сходи"; break;            case 26: name = "Ліфт"; break;    		default: break;    	}        return name;    }    function contains(string, substrings) {        var result = false;        for (var containsIterator = 0; containsIterator < substrings.length; containsIterator++) {            if (string.indexOf(substrings[containsIterator]) !== -1) {                result = true;                break;            }        }        return result;    }    function objectTypeFromName(name) {        var type = 0;        if (contains(name, ['банкомат', 'atm',  'ATM'])) {            type = 5;        } else if (contains(name, ['кафетерій',  'кафе', 'столова', 'їдальня', 'ресторан', 'бістро', 'закусочна', 'cafe', 'буфет'])) {            type = 4;        } else if (contains(name, ['кава', 'coffee', 'кофе'])) {            type = 7;        } else if (contains(name, ['майст', 'спец', 'special', 'игура', 'figure'])) {            type = 22;        } else if (contains(name, ['платіж', 'payment', 'платеж'])) {            type = 6;        } else if (contains(name, ['принт', 'print'])) {            type = 3;        } else if (contains(name, ['туалет', 'WC', 'wc', 'toilet'])) {            type = 23;        } else if (contains(name, ['аптека', 'Мед', 'лікар', 'мед', 'med', 'Med'])) {            type = 8;        } else if (contains(name, ['магазин', 'arket', 'аркет'])) {            type = 9;        } else if (contains(name, ['аудиторія', 'клас', 'аудитория', 'Class', 'study', 'навч', 'учеб', 'lesson'])) {            type = 20;        } else if (contains(name, ['виклад', 'декан', 'препод', 'чител', 'teacher', 'dekan', 'вчит'])) {            type = 21;        } else if (contains(name, ['цирульня', 'стрижка', 'hair', 'Hair'])) {            type = 12;        } else if (contains(name, ['ральня', 'стир', 'laundry'])) {            type = 11;        } else if (contains(name, ['міліція', 'ДНД', 'днд', 'охорона', 'оборона', 'police'])) {            type = 10;        } else if (contains(name, ['зал', 'Зал', 'рада', 'Рада', 'клуб', 'Клуб', 'club', 'Club', 'Совет', 'совет', 'Hall', 'hall'])) {            type = 27;        } else if (contains(name, ['лест', 'ходи', 'tairs'])) {            type = 24;        } else if (contains(name, ['exit', 'вихід', 'вхід', 'вход', 'виход'])) {            type = 25;        } else if (contains(name, ['ліфт', 'lift', 'лифт'])) {            type = 26;        }        return type;    }    function processLayers() {        for (var roomsIterator = 0; roomsIterator < rooms.length; roomsIterator++) {            processLayer(rooms[roomsIterator], roomsIterator == rooms.length - 1 && icons.length == 0);        }        for (var iconsIterator = 0; iconsIterator < icons.length; iconsIterator++) {            processLayer(icons[iconsIterator], iconsIterator == icons.length - 1);        }    }}